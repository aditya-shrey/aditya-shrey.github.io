[{"content":"Background I will discuss the automation of folder sync between private and public repositories using GitHub actions. My prior experience with automation techniques such as these is limited. However, I believe that this experience has helped me learn more about workflows and has also helped me with my personal website.\nAs I transitioned to using Hugo for building my website, I decided to create a new private repository for developmental purposes. When I was ready to deploy an updated iteration of the website, I would have to copy the contents of the public folder, generated after building the website, into my GitHub pages folder. To avoid this tedious task every time I would have to make an update, I decided to play around with GitHub actions. Below, I will delineate my solution to the problem.\nProblem Statement I have a public repository public-repo and a private repository private-repo. The goal is to automatically synchronize the contents of a folder C from the private repository to a specific location in the public repository whenever updates are made in the private repository.\nSolution Outline Using GitHub Actions, we will:\nMonitor the private repository for changes. Check out both repositories in the GitHub Actions workflow. Copy the contents of folder C from the private repository to the appropriate location in the public repository. Commit and push the changes to the public repository. Here\u0026rsquo;s how to achieve this:\nGitHub Actions Workflow name: Sync to Public Repo on: push jobs: sync: name: Sync Folder C to Public Repo runs-on: ubuntu-latest steps: # Checkout the private repository - name: Checkout Private Repo uses: actions/checkout@v2 with: path: private-repo # Checkout the public repository - name: Checkout Public Repo uses: actions/checkout@v2 with: repository: your-username/your-public-repo token: ${{ secrets.PAT_TOKEN }} path: public-repo # Create a directory for copying files - name: Create Directory toCopy run: mkdir -p toCopy # Copy files from the private repo to a temporary directory - name: Copy Files to toCopy run: | cp -r private-repo/path/to/folder-C/. toCopy/ # Copy files from the temporary directory to the public repo - name: Copy Files from toCopy to Public Repo run: | cp -r toCopy/. public-repo/path/to/folder-C/ # Commit and push changes to the public repo - name: Commit and Push Changes to Public Repo run: | cd public-repo git config user.name \u0026#34;your-username\u0026#34; git config user.email \u0026#34;your-email@example.com\u0026#34; git add . git commit -m \u0026#34;Sync updates from Private Repo to Public Repo\u0026#34; || echo \u0026#34;No changes to commit\u0026#34; git push origin main Workflow Explanation Trigger Events (on: push) This workflow is triggered whenever changes are pushed to the private repository. Job Steps Checkout Private Repo: Check out the private repository to access folder C. Checkout Public Repo: Check out the public repository where updates will be pushed. Create Directory toCopy: Create a temporary directory to hold copied files. Copy Files to toCopy: Copy folder C contents from the private repo to toCopy. Copy Files from toCopy to Public Repo: Copy the files from toCopy to the public repository. Commit and Push Changes to Public Repo: Commit and push the changes to the public repo. GitHub Secrets To securely access the repositories, you\u0026rsquo;ll need a Personal Access Token (PAT). Create a GitHub secret named PAT_TOKEN for this workflow:\nGenerate a PAT in GitHub settings (Developer Settings \u0026gt; Personal Access Tokens). Add the token to your repository secrets: Go to the repository\u0026rsquo;s Settings. Navigate to Secrets and variables \u0026gt; Actions. Click on New repository secret and name it PAT_TOKEN. Conclusion By implementing this GithHub Actions workflow, we can automatically sync specific folder contents from a private repository to a public repository, streamling our automation process. Leveraging tools like this can enhance productivity and reduce manual efforts in keeping repositories synchronized.\n","permalink":"https://aditya-shrey.github.io/blog/first/","summary":"Background I will discuss the automation of folder sync between private and public repositories using GitHub actions. My prior experience with automation techniques such as these is limited. However, I believe that this experience has helped me learn more about workflows and has also helped me with my personal website.\nAs I transitioned to using Hugo for building my website, I decided to create a new private repository for developmental purposes.","title":"Automating Folder Sync Between Private and Public Repositories Using GitHub Actions"},{"content":"Abstract Early detection of melanoma skin cancer is critical for effective treatment. In this study, we compare machine learning techniques, including CNNs, SVMs, Logistic Regression, and Transfer Learning with ResNet-18, using the Melanoma Skin Cancer Dataset. Through pre-processing and hyperparameter optimization, we assess model performance in terms of accuracy, precision, recall, and F1-score. Our findings highlight CNNs’ efficacy in achieving high accuracy, with SVM and Transfer Learning also showing promise. This study contributes to advancing machine learning applications in medical imaging for melanoma detection.\nProject Report Previous Next \u0026nbsp; \u0026nbsp; / [pdf] View the PDF file here. Presentation Slides Previous Next \u0026nbsp; \u0026nbsp; / [pdf] View the PDF file here. ","permalink":"https://aditya-shrey.github.io/projects/enhancing_melanoma_detection/","summary":"Abstract Early detection of melanoma skin cancer is critical for effective treatment. In this study, we compare machine learning techniques, including CNNs, SVMs, Logistic Regression, and Transfer Learning with ResNet-18, using the Melanoma Skin Cancer Dataset. Through pre-processing and hyperparameter optimization, we assess model performance in terms of accuracy, precision, recall, and F1-score. Our findings highlight CNNs’ efficacy in achieving high accuracy, with SVM and Transfer Learning also showing promise. This study contributes to advancing machine learning applications in medical imaging for melanoma detection.","title":"Enhancing Melanoma Detection: A Comparative Study of Machine Learning Techniques Using the Melanoma Skin Cancer Dataset"},{"content":"Introduction Our immersion project focused on developing an autonomous taxi system within a simulated miniature city environment. We programmed a virtual taxi to navigate this environment autonomously, relying solely on raw sensor measurements (e.g., GPS, IMU) and the bounding box output of object detection algorithms. The core challenge involved achieving robust perception and localization, allowing the taxi to understand its surroundings and precisely determine its position within the map. This perception data then fueled dynamic routing and motion planning. By leveraging this information, the taxi could navigate a designated sequence of pick-up and drop-off locations while adhering to a predefined set of traffic regulations (lane markings, stop signs, etc). We competed against other teams in a live event, and our success hinged on our ability to effectively combine localization, routing, motion planning, and perception to achieve safe and efficient autonomous navigation. Following our demo at the immersion showcase, we identified areas for improvement including resolving edge conditions with localization and fully-integrating perception.\nPresentation Slides Previous Next \u0026nbsp; \u0026nbsp; / [pdf] View the PDF file here. Project Report Previous Next \u0026nbsp; \u0026nbsp; / [pdf] View the PDF file here. Video Demonstration ","permalink":"https://aditya-shrey.github.io/projects/autonomous_vehicles/","summary":"Introduction Our immersion project focused on developing an autonomous taxi system within a simulated miniature city environment. We programmed a virtual taxi to navigate this environment autonomously, relying solely on raw sensor measurements (e.g., GPS, IMU) and the bounding box output of object detection algorithms. The core challenge involved achieving robust perception and localization, allowing the taxi to understand its surroundings and precisely determine its position within the map. This perception data then fueled dynamic routing and motion planning.","title":"Autonomous Taxi System within a Simulated City Environment"},{"content":"Introduction The Grants-Self-Service project represents a transformative step in managing the grant application process at Vanderbilt University. This pioneering initiative utilizes advanced generative AI, including private, institutional AI instances and innovative techniques like retrieval augmented generation (RAG) and custom GPT models. Our aim is to simplify and accelerate grant development and submission, enabling faculty to swiftly access and efficiently handle vast repositories of prior grant data, which include over 479,980 previously submitted grants. The system ensures high data privacy and security standards by operating within Vanderbilt’s high-performance computing environment. By streamlining these complex processes, the project supports our academic community in navigating the intricacies of funding and research management more effectively.\nOur goal is to create a self-service system designed to accelerate the process of developing and submitting grants, enabling faculty to quickly access prior grant information and address grant related inquiries efficiently. The project leverages private, institutional instances of generative AI, explore retrieval augmented generation (RAG), and utilize vast quantities of existing data.\nProject Slides Previous Next \u0026nbsp; \u0026nbsp; / [pdf] View the PDF file here. ","permalink":"https://aditya-shrey.github.io/projects/grant_self_service/","summary":"Introduction The Grants-Self-Service project represents a transformative step in managing the grant application process at Vanderbilt University. This pioneering initiative utilizes advanced generative AI, including private, institutional AI instances and innovative techniques like retrieval augmented generation (RAG) and custom GPT models. Our aim is to simplify and accelerate grant development and submission, enabling faculty to swiftly access and efficiently handle vast repositories of prior grant data, which include over 479,980 previously submitted grants.","title":"Grants Self Service System"}]